# Single configuration for both development and production
services:
  backend:
    build: .
    container_name: receipts-api
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      # Database configuration
      - DB_NAME=${DB_NAME}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - SPARKDB_USER=${SPARKDB_USER}
      - SPARKDB_PASSWORD=${SPARKDB_PASSWORD}
      - PG_DB_PORT=${DB_PORT}  # Your code uses PG_DB_PORT, mapping from DB_PORT
      # App secrets
      - APP_KEY=${APP_KEY}
      - JWT_KEY=${JWT_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - EMAIL_WHITELIST=${EMAIL_WHITELIST}
      - TRAINING_DB_NAME=${TRAINING_DB_NAME}
    networks:
      - receipts-network
      - traefik-global
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.receipts-api.rule=Host(`receipts.sparktobloom.com`) && PathPrefix(`/auth`, `/receipts`, `/docs`, `/openapi.json`)"
      - "traefik.http.routers.receipts-api.entrypoints=websecure"
      - "traefik.http.routers.receipts-api.tls.certresolver=letsencrypt"
      - "traefik.http.routers.receipts-api.priority=100"
      - "traefik.http.services.receipts-api.loadbalancer.server.port=8000"
      - "traefik.docker.network=traefik-global"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: receipts
    restart: unless-stopped
    environment:
      - NODE_ENV=production
    depends_on:
      - backend
    networks:
      - receipts-network
      - traefik-global
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.receipts.rule=Host(`receipts.sparktobloom.com`)"
      - "traefik.http.routers.receipts.entrypoints=websecure"
      - "traefik.http.routers.receipts.tls.certresolver=letsencrypt"
      - "traefik.http.routers.receipts.priority=50"
      - "traefik.http.services.receipts.loadbalancer.server.port=4400"
      - "traefik.docker.network=traefik-global"

networks:
  receipts-network:
    driver: bridge
  traefik-global:
    external: true